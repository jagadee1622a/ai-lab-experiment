from collections import deque

def valid(m, c): return 0 <= m <= 3 and 0 <= c <= 3 and (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)

def solve():
    start, goal = (3, 3, 1), (0, 0, 0)
    moves = [(1,0), (0,1), (1,1), (2,0), (0,2)]
    q = deque([(start, [start])])
    seen = set()
    
    while q:
        (m, c, b), path = q.popleft()
        if (m, c, b) == goal:
            return path
        if (m, c, b) in seen: continue
        seen.add((m, c, b))
        
        for dm, dc in moves:
            nm, nc, nb = (m - dm, c - dc, 0) if b else (m + dm, c + dc, 1)
            if valid(nm, nc): q.append(((nm, nc, nb), path + [(nm, nc, nb)]))

# Run and print solution
for step in solve(): print(step)
