def winner(b, p):
    return any([b[i]==b[j]==b[k]==p for i,j,k in [(0,1,2),(3,4,5),(6,7,8),
                                                  (0,3,6),(1,4,7),(2,5,8),
                                                  (0,4,8),(2,4,6)]])

def minimax(b, turn):
    if winner(b, 'X'): return 1
    if winner(b, 'O'): return -1
    if ' ' not in b: return 0
    scores = []
    for i in range(9):
        if b[i] == ' ':
            b[i] = turn
            score = minimax(b, 'O' if turn == 'X' else 'X')
            b[i] = ' '
            scores.append(score)
    return max(scores) if turn == 'X' else min(scores)

def best_move(b):
    best, move = -2, -1
    for i in range(9):
        if b[i] == ' ':
            b[i] = 'X'
            score = minimax(b, 'O')
            b[i] = ' '
            if score > best:
                best, move = score, i
    return move

# Example usage
board = [' ']*9
while True:
    print(board[0:3], "\n", board[3:6], "\n", board[6:9])
    if winner(board, 'X'):
        print("AI wins!"); break
    if winner(board, 'O'):
        print("You win!"); break
    if ' ' not in board:
        print("Draw!"); break
    move = int(input("Your move (0-8): "))
    if board[move] != ' ': continue
    board[move] = 'O'
    ai = best_move(board)
    if ai != -1: board[ai] = 'X'
